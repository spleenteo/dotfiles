" The set nocompatible setting makes vim behave in a more useful way (the default) than the vi-compatible manner.
set nocompatible

" Vundle
source ~/.dotfiles/vim/vundlerc

" Enable syntax highlighting
syntax enable

" Make tab completion for files/buffers act like bash
set wildmenu

" Default charset encoding
set encoding=utf-8

" Leader key
let mapleader=","
" Black background, please
set background=dark

" My favourite syntax colorscheme (iterm 256 colors)
set t_Co=256
color ir_black
set background=dark

" Line numbering
set number
" Show the cursor position all the time
set ruler
set cursorline

" Display incomplete commands
set showcmd

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" == Whitespace ==
" Don't wrap lines
set nowrap
" A tab is two spaces
set tabstop=2
" An autoindent (with <<) is two spaces
set shiftwidth=2
" Use spaces, not tabs
set expandtab
" Show invisible characters
set list
" backspace through everything in insert mode
set backspace=indent,eol,start    " List chars

" A tab should display as "▸", trailing whitespace as "·"
" precedes and extends are the characters to show when wrap
" is off and the line continues beyond the right of the screen
set listchars=trail:·,precedes:«,extends:»,tab:▸\

" == Searching ==
" Highlight matches
set hlsearch
" Incremental searching
set incsearch
" Searches are case insensitive...
set ignorecase
" ...unless they contain at least one capital letter
set smartcase
" clear the search buffer when hitting return
nnoremap <CR> :nohlsearch<cr>

" Treat vundlerc as a vim file
au BufRead,BufNewFile vundlerc set ft=vim

" Treat JSON files like JavaScript
au BufNewFile,BufRead *.json set ft=javascript

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Podfile,Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" Movefile is Yaml
au BufRead,BufNewFile {Movefile}    set ft=yaml

" Cakefile is Yaml
au BufRead,BufNewFile {Cakefile}    set ft=coffee

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" Automatically remove trailing spaces on some files (and fix tabs)
au BufWritePre *.rb,*.css,*.sass,*.scss,*.coffee :%s/\s\+$//e | :retab

" provide some context when editing
set scrolloff=3

set backupdir=~/.dotfiles/vim/_backup    " where to put backup files.
set directory=~/.dotfiles/vim/_temp      " where to put swap files.
set backupskip=/tmp/*,/private/tmp/*

" makes work arrows in visual mode
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

" == Ruby blocks ==
runtime macros/matchit.vim

" == CtrlP ==
let g:ctrlp_map = '<leader>l'
noremap <leader>. :CtrlPMRU<CR>
let g:ctrlp_match_window_reversed = 0
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/tmp/*
let g:ctrlp_user_command = ['.git/', 'cd %s && git ls-files --exclude-standard -co']

" == DestroyAllSoftware tips ==

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" leader-f for Ack
noremap <leader>f :Ack<space>

" Open routes.rb
noremap <leader>gr :topleft :60split config/routes.rb<cr>

" Open database.yml
noremap <leader>gd :topleft :60split config/database.yml<cr>

" Open schema.rb
noremap <leader>gs :topleft :60split db/schema.rb<cr>

" Open Gemfile
noremap <leader>gg :topleft :60split Gemfile<cr>

" Can't be bothered to understand the difference between ESC and <c-c> in
" insert mode
inoremap <c-c> <esc>

" == colorpick ==
" Needs https://github.com/jnordberg/color-pick
function! ColorPick()
  let word = expand("<cword>")
  let hex = system('colorpick -startColor ' . word)
  if word =~ '\([a-fA-F1-9]\{3,6\}\)'
    execute "normal! ciw" . hex
  else
    execute "normal! a#" . hex
  endif
endfunction
nnoremap <leader>c :call ColorPick()<CR>

if exists("&colorcolumn")
  " == Vertical line at 80 chars ==
  set colorcolumn=80
  highlight ColorColumn ctermbg=black
endif

" == Paste from clipboard ==
set clipboard=unnamed " this needs vim 7.3 with +clipboard

" == Current line highlighter ==
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline
set cursorline
hi CursorLine cterm=NONE ctermbg=0

" == %% gets converted to directory of current file ==
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" == Prefills :edit command with the current dir ==
map <leader>e :edit %%

" == Rename the current file! ==
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    let new_dir = fnamemodify(new_name, ":p:h")
    if new_name != '' && new_name != old_name
        exec ':silent !mkdir -p ' . new_dir
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
noremap <leader>n :call RenameFile()<cr>

" == Close VIM if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

function! CustomTreeToggle()
  if !exists("t:NERDTreeBufName") || bufwinnr(t:NERDTreeBufName) == -1
    if strlen(expand("%:p")) > 0
      exec ':NERDTreeFind'
    else
      exec ':NERDTree'
    end
  else
    exec ':NERDTreeClose'
  endif
endfunction
noremap <leader>d :call CustomTreeToggle()<cr>
let NERDTreeHijackNetrw=1

" == Mouse support
" Send more characters for redraws
set ttyfast
" Enable mouse use in all modes
set mouse=a
" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
set ttymouse=xterm2

" == Status bar, replaced with Powerline
" Always show the status bar
set laststatus=2
let g:Powerline_symbols = 'fancy'

" == Disable F1 opening help
nnoremap <F1> :echo<CR>
inoremap <F1> <C-o>:echo<CR>

" == Indent Guides
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
nnoremap <silent><unique> <Leader>i <Plug>IndentGuidesToggle
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=None

function! RestartServer()
  exec ':silent !mkdir -p tmp'
  exec ':silent !touch tmp/restart.txt'
  redraw!
endfunction
noremap <leader>r :call RestartServer()<cr>

" quick save and quit!
nnoremap s :w<CR>

" q closes buffer, Q records macros
nnoremap Q q
nnoremap q :q<CR>

" + and - increment and decrement numbers
nnoremap + <C-a>
nnoremap - <C-x>

" sessions
let g:session_directory = "."
let g:session_autoload = 'yes'
let g:session_autosave = 'yes'
set sessionoptions-=buffers

" no backup files
set nobackup
set nowritebackup
set noswapfile

" Move cursor by display lines when wrapping
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Let's make escape better, together.
inoremap jk <Esc>
inoremap kj <Esc>

" cursor is an underscore in insert mode
let &t_SI .= "\<Esc>[6 q"
" else cursor is a block
let &t_EI .= "\<Esc>[2 q"

" move the lines up and down with ctrl+shift+arrows
vnoremap <c-s-k> :m-2<CR>gv=gv
vnoremap <c-s-j> :m'>+<CR>gv=gv

" split
nnoremap <leader>v :execute "vsplit " . bufname("#")<CR>
nnoremap <leader>x :execute "split " . bufname("#")<CR>

" y u no consistent?
nnoremap Y y$

let NERDTreeIgnore=['node_modules', 'stubs']

" <leader>A runs all the specs
nnoremap <silent> <leader>A :<C-U>w \| call Plumber("rspec spec")<CR>

" Use the silver searcher
let g:ackprg = 'ag --nogroup --nocolor --column'

" Convert hashrockets into new 1.9 hash syntax
noremap <leader>rr :%s/:\(\w\+\)\s*=>/\1:/ge<CR><C-o>

" Remove trailing spaces
noremap <leader>ss :%s/\s\+$//e<CR><C-o>

function! AddTrailingNewLine()
  if match(getline("$"), "^\\s*$") ==# -1
    $s/^\(.*\)$/\1\r/
    exec "normal \<c-o>"
  end
endfunction

" POSIX says a line is a sequence of zero or more non-newline characters plus
" a terminating newline character
autocmd BufWritePre * :call AddTrailingNewLine()

