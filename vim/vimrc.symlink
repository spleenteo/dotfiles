" The set nocompatible setting makes vim behave in a more useful way (the default) than the vi-compatible manner.
set nocompatible

" Vundle
source ~/.dotfiles/vim/vundlerc

" Enable syntax highlighting
syntax enable

" Make tab completion for files/buffers act like bash
set wildmenu

" Default charset encoding
set encoding=utf-8

" Leader key
let mapleader=","

" Single line command status
set cmdheight=1

" My favourite syntax colorscheme (iterm 256 colors)
set t_Co=16
set background=dark
colorscheme noctu
hi VertSplit ctermbg=0 ctermfg=0
hi ColorColumn ctermbg=8 ctermfg=NONE

hi! link Define Function
hi! link Macro Function
hi! link Tag SpecialComment

" Line numbering
set number
" Show the cursor position all the time
set ruler
set cursorline

" Display incomplete commands
set showcmd

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden

" == Whitespace ==
" Don't wrap lines
set nowrap
" A tab is two spaces
set tabstop=2
" An autoindent (with <<) is two spaces
set shiftwidth=2
" Use spaces, not tabs
set expandtab
" Show invisible characters
set list
" backspace through everything in insert mode
set backspace=indent,eol,start    " List chars

" A tab should display as "▸", trailing whitespace as "·"
" precedes and extends are the characters to sho when wrap
" is off and the line continues beyond the right of the screen
set listchars=trail:·,precedes:«,extends:»,tab:→\ 

" == Searching ==
" Highlight matches
set hlsearch
" Incremental searching
set incsearch
" Searches are case insensitive...
set ignorecase
" ...unless they contain at least one capital letter
set smartcase
" clear the search buffer when hitting return (but preserve natural behaviour 
" in quickfix windows)
nnoremap <expr> <CR> (&buftype is# "quickfix" ? "<cr>" : ":\<C-u>nohlsearch\n")

" Treat vundlerc as a vim file
au BufRead,BufNewFile vundlerc set ft=vim

" Treat JSON files like JavaScript
au BufNewFile,BufRead *.json set ft=javascript

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Podfile,Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" Movefile is Yaml
au BufRead,BufNewFile {Movefile}    set ft=yaml

" Cakefile is Yaml
au BufRead,BufNewFile {Cakefile}    set ft=coffee

" Wrap text at 80 chars
au BufRead,BufNewFile *.md,*.markdown setlocal textwidth=80

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
au Filetype gitcommit setlocal textwidth=72 colorcolumn=72

" Automatically remove trailing spaces on some files (and fix tabs)
au BufWritePre *.rb,*.css,*.sass,*.scss,*.coffee :%s/\s\+$//e | :retab

" Slim comments start with /
autocmd FileType slim set commentstring=\/\ %s

" provide some context when editing
set scrolloff=3

set backupdir=~/.dotfiles/vim/_backup    " where to put backup files.
set directory=~/.dotfiles/vim/_temp      " where to put swap files.
set backupskip=/tmp/*,/private/tmp/*

" makes work arrows in visual mode
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

" == Ruby blocks ==
runtime macros/matchit.vim

" == Command-T ==
nnoremap <silent> <Leader>l :CommandT<CR>
let g:CommandTRefreshMap='<C-f>'
let g:CommandTMaxHeight=20
let g:CommandTMinHeight=5
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.sass-cache/*,*/tmp/*

" == DestroyAllSoftware tips ==

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" leader-f for The Silver Searcher
nnoremap <leader>f :Ag '

" Open routes.rb
noremap <leader>gr :topleft :60split config/routes.rb<cr>

" Open database.yml
noremap <leader>gd :topleft :60split config/database.yml<cr>

" Open schema.rb
noremap <leader>gs :topleft :60split db/schema.rb<cr>

" Open Gemfile
noremap <leader>gg :topleft :60split Gemfile<cr>

" Can't be bothered to understand the difference between ESC and <c-c> in
" insert mode
inoremap <c-c> <esc>

" == colorpick ==
" Needs https://github.com/jnordberg/color-pick
function! ColorPick()
  let word = expand("<cword>")
  let hex = system('colorpick -startColor ' . word)
  if word =~ '\([a-fA-F1-9]\{3,6\}\)'
    execute "normal! ciw" . hex
  else
    execute "normal! a#" . hex
  endif
endfunction
nnoremap <leader>c :call ColorPick()<CR>

" == Vertical line at 80 chars ==
set colorcolumn=80

" == Paste from clipboard ==
set clipboard=unnamed " this needs vim 7.3 with +clipboard

" == Current line highlighter ==
au WinLeave * set nocursorline nocursorcolumn
au WinEnter * set cursorline
set cursorline
hi CursorLine cterm=NONE ctermbg=0

" == %% gets converted to directory of current file ==
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" == Prefills :edit command with the current dir ==
map <leader>e :edit %%

" == Close VIM if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

function! CustomTreeToggle()
  if !exists("t:NERDTreeBufName") || bufwinnr(t:NERDTreeBufName) == -1
    if strlen(expand("%:p")) > 0
      exec ':NERDTreeFind'
    else
      exec ':NERDTree'
    end
  else
    exec ':NERDTreeClose'
  endif
endfunction
noremap <leader>d :call CustomTreeToggle()<cr>
let NERDTreeHijackNetrw=1

" == Mouse support
" Send more characters for redraws
set ttyfast
" Enable mouse use in all modes
set mouse=a
" Set this to the name of your terminal that supports mouse codes.
" Must be one of: xterm, xterm2, netterm, dec, jsbterm, pterm
set ttymouse=xterm2

" == Disable F1 opening help
nnoremap <F1> :echo<CR>
inoremap <F1> <C-o>:echo<CR>

" == Indent Guides
let g:indent_guides_auto_colors = 0
let g:indent_guides_enable_on_vim_startup = 1
nnoremap <silent><unique> <Leader>i <Plug>IndentGuidesToggle
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=NONE

" quick save and quit!
nnoremap s :w<CR>

" q closes buffer, Q records macros
nnoremap Q q
nnoremap q :q<CR>

" + and - increment and decrement numbers
nnoremap + <C-a>
nnoremap - <C-x>

" sessions
let g:session_directory = "."
let g:session_autoload = 'yes'
let g:session_autosave = 'yes'
set sessionoptions-=buffers

" no backup files
set nobackup
set nowritebackup
set noswapfile

" Move cursor by display lines when wrapping
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Let's make escape better, together.
inoremap jk <Esc>
inoremap kj <Esc>

" cursor is an underscore in insert mode
" let &t_SI .= "\<Esc>[6 q"
" else cursor is a block
" let &t_EI .= "\<Esc>[2 q"

" split
nnoremap <leader>v :execute "vsplit " . bufname("#")<CR>
nnoremap <leader>x :execute "split " . bufname("#")<CR>

" y u no consistent?
nnoremap Y y$

let NERDTreeIgnore=['node_modules', 'stubs']

" <leader>A runs all the specs
nnoremap <silent> <leader>A :<C-U>w \| call Plumber("rspec spec")<CR>
nnoremap <silent> <leader>C :<C-U>w \| call Plumber("cucumber")<CR>

" Convert hashrockets into new 1.9 hash syntax
noremap <leader>rr :%s/:\(\w\+\)\s*=>/\1:/ge<CR><C-o>

" Remove trailing spaces
noremap <leader>ss :%s/\s\+$//e<CR><C-o>

function! AddTrailingNewLine()
  " \%$ -> end of file
  %s/[\r\n]*\%$/\r/
  exec "silent! normal! \<c-o>"
endfunction

" POSIX says a line is a sequence of zero or more non-newline characters plus
" a terminating newline character
autocmd BufWritePre * :call AddTrailingNewLine()

cmap w!! w !sudo tee %
command! KillControlM :normal :%s/<C-V><C-M>//e<CR><C-O><CR>

" Faster split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" More natural split opening
set splitbelow
set splitright

" Airline
" Always show the status bar
set laststatus=2
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_enable_syntastic = 0
let g:airline_enable_bufferline = 0
let g:airline_enable_branch = 1

let g:airline_linecolumn_prefix = '␊ '
let g:airline_linecolumn_prefix = '␤ '
let g:airline_linecolumn_prefix = '¶ '
let g:airline_branch_prefix = '⎇  '
let g:airline_paste_symbol = 'ρ'
let g:airline_theme='badwolf'

" rails.vim projections - typing `:Efactory users` will open the users factory
let g:rails_projections = {
  \ "spec/factories/*.rb": {
  \   "command":   "factory",
  \   "affinity":  "collection",
  \   "alternate": "app/models/%i.rb",
  \   "related":   "db/schema.rb#%s",
  \   "test":      "spec/models/%i_spec.rb",
  \   "template":  "FactoryGirl.define do\n  factory :%i do\n  end\nend",
  \   "keywords":  "factory sequence"
  \ },
  \ "app/presenters/*_presenter.rb": {
  \   "command": "presenter",
  \   "affinity": "model",
  \   "alternate": "spec/presenters/%s_presenter_spec.rb",
  \   "test":      "spec/models/%i_spec.rb",
  \   "related": "app/models/%s.rb",
  \   "template": "class %SPresenter < BasePresenter\nend",
  \   "keywords":  "presents presents_collection"
  \ },
  \ }

let g:plumber_precommand = 'plumber-exit-copy-mode'

let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

let g:SuperTabMappingForward = '\'

